import argparse
from utils.trainfiles import TrainFiles
from utils.dataloader import DataLoader
from model.unet import UNet
from model.train import train

import torch
import yaml


def main() -> None:
    parser = argparse.ArgumentParser(description="Your script description")

    parser.add_argument(
        "--trainconfigpath", "-p", required=True, help="Path to train config YAML file"
    )
    parser.add_argument(
        "--trainfiles",
        "-t",
        required=True,
        help='Path to YAML file with all train examples (generated by "search_trainfiles.py").',
    )
    parser.add_argument(
        "--modelpath", "-m", required=True, help="Path to save the trained model"
    )

    args = parser.parse_args()
    trainconfigpath = args.trainconfigpath
    train_yaml_path = args.trainfiles
    modelpath = args.modelpath

    with open(trainconfigpath, "r") as f:
        trainconfig = yaml.safe_load(f)
    batch_size = trainconfig["batch_size"]
    learning_rate = trainconfig["learning_rate"]
    load_multiple_targets = trainconfig["load_multiple_targets"]
    n_post = trainconfig["n_post"]
    n_pre = trainconfig["n_pre"]
    num_epochs = trainconfig["num_epochs"]
    train_height = trainconfig["train_height"]
    train_width = trainconfig["train_width"]
    trainfiles = TrainFiles(train_yaml_path, False)
    dataloader = DataLoader(
        trainfiles,
        batch_size,
        n_pre,
        n_post,
        train_height,
        train_width,
        load_multiple_targets,
    )
    model = UNet(n_pre + n_post)
    train(model, dataloader, num_epochs, learning_rate, modelpath)


if __name__ == "__main__":
    if torch.cuda.is_available():
        print("GPU ready")
    else:
        print("Warning: only CPU found")
    main()
