import argparse
from utils.open_file import open_file
from utils.normalization import z_norm
from utils.dataloader import DataLoader
from model.unet import UNet
from model.train import train

import torch
import yaml
import numpy as np


def main() -> None:
    parser = argparse.ArgumentParser(description="Start training of UNet for denoising")

    parser.add_argument(
        "--trainconfigpath", "-p", required=True, help="Path to train config YAML file"
    )
    parser.add_argument(
        "--train_h5",
        "-t",
        required=True,
        help='Path to h5 file with all train examples (generated by "trainfiles.py").',
    )
    parser.add_argument(
        "--modelpath", "-m", required=True, help="Path to save the trained model"
    )

    args = parser.parse_args()
    trainconfigpath = args.trainconfigpath
    modelpath = args.modelpath
    train_h5 = args.train_h5

    with open(trainconfigpath, "r") as f:
        trainconfig = yaml.safe_load(f)
    batch_size = trainconfig["batch_size"]
    learning_rate = trainconfig["learning_rate"]
    num_epochs = trainconfig["num_epochs"]
    n_pre = trainconfig["n_pre"]
    n_post = trainconfig["n_post"]
    path_example_img = trainconfig["path_example_img"]
    target_frame_example_img = trainconfig["target_frame_example_img"]
    predict_every_n_batches = trainconfig["predict_every_n_batches"]

    dataloader = DataLoader(train_h5, batch_size, n_pre)
    model = UNet(n_pre + n_post)

    if path_example_img != "":
        if target_frame_example_img < n_pre:
            raise ValueError(
                "Target frame of example image must be bigger than n_pre. Adjust the settings in trainconfig.yaml"
            )
        example_img = open_file(path_example_img)
        example_img_target_frame = example_img[target_frame_example_img]
        mean = np.mean(example_img, axis=0)
        std = np.std(example_img, axis=0)
        example_img = z_norm(example_img, mean, std)
        example_img_pred_frames = example_img[
            target_frame_example_img - n_pre - 1 : target_frame_example_img + n_post
        ]
        example_img_pred_frames = np.delete(
            example_img_pred_frames, n_pre, axis=0
        ).reshape(1, n_pre + n_post, example_img.shape[-2], example_img.shape[-1])
        train(
            model,
            dataloader,
            num_epochs,
            learning_rate,
            modelpath,
            example_img=example_img_pred_frames,
            example_img_target=example_img_target_frame,
            example_mean=mean,
            example_std=std,
            predict_example_every_n_batches=predict_every_n_batches,
        )
    else:
        train(model, dataloader, num_epochs, learning_rate, modelpath)


if __name__ == "__main__":
    if torch.cuda.is_available():
        print("GPU ready")
    else:
        print("Warning: only CPU found")
    main()
